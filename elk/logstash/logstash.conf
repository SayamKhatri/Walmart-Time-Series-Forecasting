input {
  file {
    path => "/usr/share/logs/data_preprocessing/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => plain { charset => "UTF-8" }
    tags => ["data_preprocessing"]
  }
  file {
    path => "/usr/share/logs/model_training/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => plain { charset => "UTF-8" }
    tags => ["model_training"]
  }
  file {
    path => "/usr/share/logs/model_deployment/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => plain { charset => "UTF-8" }
    tags => ["model_deployment"]
  }
}

filter {
  # Parse the timestamp and log level from the message
  grok {
    match => {
      "message" => "%{TIMESTAMP_ISO8601:timestamp}%{SPACE}\|%{SPACE}%{LOGLEVEL:level}%{SPACE}\|%{SPACE}%{DATA:logger}%{SPACE}\|%{SPACE}%{GREEDYDATA:msg}"
    }
    tag_on_failure => ["_grokparsefailure"]
  }

  # Alternative pattern for logs that might not match the exact format
  if "_grokparsefailure" in [tags] {
    grok {
      match => {
        "message" => "%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{LOGLEVEL:level}%{SPACE}%{DATA:logger}%{SPACE}%{GREEDYDATA:msg}"
      }
      tag_on_failure => ["_grokparsefailure2"]
    }
  }

  # If still can't parse, just use the raw message
  if "_grokparsefailure2" in [tags] {
    mutate {
      add_field => { "msg" => "%{message}" }
      add_field => { "level" => "INFO" }
      add_field => { "logger" => "unknown" }
    }
  }

  # Parse the timestamp
  date {
    match => ["timestamp", "ISO8601"]
    target => "@timestamp"
    remove_field => ["timestamp"]
    tag_on_failure => ["_dateparsefailure"]
  }

  # Add component information based on tags
  if "data_preprocessing" in [tags] {
    mutate {
      add_field => { "component" => "data_preprocessing" }
    }
  } else if "model_training" in [tags] {
    mutate {
      add_field => { "component" => "model_training" }
    }
  } else if "model_deployment" in [tags] {
    mutate {
      add_field => { "component" => "model_deployment" }
    }
  }
}

output {
  if "data_preprocessing" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "data_preprocessing_logs"
    }
  } else if "model_training" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "model_training_logs"
    }
  } else if "model_deployment" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "model_deployment_logs"
    }
  }

  stdout {
    codec => rubydebug
  }
}
